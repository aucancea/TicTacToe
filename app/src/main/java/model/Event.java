package model;

/**
*    The Event class models a game event between two users in the TicTacToe game.
*    Event objects will be used to store game events from an initial game initiation to
*    when a game is completed or aborted. The eventId attribute will be used to uniquely
*    identify every event in the game. The value is autogenerated by the central database
*    at the point of invitation. This model class maps to the database table â€˜Event, with
*    all attributes having corresponding table columns.
*    @author Chrisitan Silvano
*    @author Erick Aucancela 
*/
public class Event {

    public enum EventStatus {
        PENDING,
        DECLINED,
        ACCEPTED,
        PLAYING,
        COMPLETED,
        ABORTED
    }

    private int eventId;
    private String sender;
    private String opponent;
    private EventStatus status;
    private String turn;
    private int move;

    /**
     * A default constructor for this class
     * @author Erick Aucancela
     */
    public Event() {
        this.eventId = 1;
        this.sender = "User1";
        this.opponent = "User2";
        this.status = EventStatus.ABORTED;
        this.turn = "User1";
        this.move = 1;
    }

    /**
     * A constructor that sets all attributes of this class
     * @param eventId int
     * @param sender string
     * @param opponent string
     * @param status event
     * @param turn string
     * @param move int
     */
    
    public Event(int eventId, String sender, String opponent, EventStatus status, String turn, int move) {
        this.eventId = eventId;
        this.sender = sender;
        this.opponent = opponent;
        this.status = status;
        this.turn = turn;
        this.move = move;
    }

    /**
     * Assigns a value to parameters once user begins the code.
     * @author Erick Aucancela
     * @param eventId int
     */
    
    public void setEventId(int eventId) {
        this.eventId = eventId;
    }

    /**
     * Assigns a value to parameters once user begins the code.
     * @author Erick Aucancela
     * @param sender string
     */
    public void setSender(String sender) {
        this.sender = sender;
    }

    /**
     * Assigns a value to parameters once user begins the code.
     * @author Erick Aucancela
     * @param opponent string
     */
    public void setOpponent(String opponent) {
        this.opponent = opponent;
    }

    /**
     * Assigns a value to parameters once user begins the code.
     * @author Erick Aucancela
     * @param status eventStatus
     */
    public void setStatus(EventStatus status) {
        this.status = status;
    }

    /**
     * Assigns a value to parameters once user begins the code.
     * @author Erick Aucancela
     * @param turn string
     */
    public void setTurn(String turn) {
        this.turn = turn;
    }

    /**
     * Assigns a value to parameters once user begins the code.
     * @author Erick Aucancela
     * @param move int
     */
    public void setMove(int move) {
        this.move = move;
    }

    /**
     * return value of the variable
     * @author Erick Aucancela
     * @return none
     */
    public int getEventId() {
        return eventId;
    }

    /**
     * return value of the variable
     * @author Erick Aucancelas
     * @return sender
     */
    public String getSender() {
        return sender;
    }

    /**
     * return value of the variable
     * @author Erick Aucancela
     * @return opponent
     */
    public String getOpponent() {
        return opponent;
    }

    /**
     * return value of the variable
     * @author Erick Aucancela
     * @return status
     */
    public EventStatus getStatus() {
        return status;
    }

    /**
     * return value of the variable
     * @author Erick Aucancela
     * @return turn
     */
    public String getTurn() {
        return turn;
    }

    /**
     * return value of the variable
     * @author Erick Aucancela
     * @return move
     */
    public int getMove() {
        return move;
    }

    /**
     * Implementing the equals method to verify if two objects under the eventId name are equal to one another
     * @author Erick Aucancela
     * @param other object
     * @return true or false depending on if equals method os proved correct
     */
    @Override
    public boolean equals(Object other) {
        if(this == other) {
            return true;
        } else if(other == null || getClass() != other.getClass()){
            return false;
        }
            Event otherEvent = (Event) other;
            return this.eventId == other.getEventId();
    }
}
